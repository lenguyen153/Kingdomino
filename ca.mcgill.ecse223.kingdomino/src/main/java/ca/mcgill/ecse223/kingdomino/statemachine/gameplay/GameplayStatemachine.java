/** Generated by YAKINDU Statechart Tools code generator. */
package ca.mcgill.ecse223.kingdomino.statemachine.gameplay;


public class GameplayStatemachine implements IGameplayStatemachine {
	protected class SCIGameImpl implements SCIGame {
	
		private SCIGameOperationCallback operationCallback;
		
		public void setSCIGameOperationCallback(
				SCIGameOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCIDraftImpl implements SCIDraft {
	
		private SCIDraftOperationCallback operationCallback;
		
		public void setSCIDraftOperationCallback(
				SCIDraftOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean ready;
		
		
		public void raiseReady() {
			ready = true;
			runCycle();
		}
		
		private boolean validSelection;
		
		
		public void raiseValidSelection() {
			validSelection = true;
			runCycle();
		}
		
		protected void clearEvents() {
			ready = false;
			validSelection = false;
		}
	}
	
	
	protected class SCITurnImpl implements SCITurn {
	
		private SCITurnOperationCallback operationCallback;
		
		public void setSCITurnOperationCallback(
				SCITurnOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean next;
		
		
		public void raiseNext() {
			next = true;
			runCycle();
		}
		
		private boolean preplaceDomino;
		
		
		public void raisePreplaceDomino() {
			preplaceDomino = true;
			runCycle();
		}
		
		private boolean validPlacement;
		
		
		public void raiseValidPlacement() {
			validPlacement = true;
			runCycle();
		}
		
		protected void clearEvents() {
			next = false;
			preplaceDomino = false;
			validPlacement = false;
		}
	}
	
	
	protected class SCIPlayerImpl implements SCIPlayer {
	
		private SCIPlayerOperationCallback operationCallback;
		
		public void setSCIPlayerOperationCallback(
				SCIPlayerOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean discard;
		
		
		public void raiseDiscard() {
			discard = true;
			runCycle();
		}
		
		protected void clearEvents() {
			discard = false;
		}
	}
	
	
	protected SCIGameImpl sCIGame;
	
	protected SCIDraftImpl sCIDraft;
	
	protected SCITurnImpl sCITurn;
	
	protected SCIPlayerImpl sCIPlayer;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Initializing,
		main_region_Initializing_r1_CreatingFirstDraft,
		main_region_Initializing_r1_SelectingFirstDomino,
		main_region_Running,
		main_region_Running_r1_InitializeTurn,
		main_region_Running_r1_PlayersTurn,
		main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer,
		main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino,
		main_region_Running_r1_PlayersTurn_r1_SelectingDomino,
		main_region_Running_r1_PlayersTurn_r1_Discarding,
		main_region_EndGame,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public GameplayStatemachine() {
		sCIGame = new SCIGameImpl();
		sCIDraft = new SCIDraftImpl();
		sCITurn = new SCITurnImpl();
		sCIPlayer = new SCIPlayerImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (this.sCIGame.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIGame must be set.");
		}
		
		if (this.sCIDraft.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIDraft must be set.");
		}
		
		if (this.sCITurn.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCITurn must be set.");
		}
		
		if (this.sCIPlayer.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIPlayer must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Initializing_r1_CreatingFirstDraft:
				main_region_Initializing_r1_CreatingFirstDraft_react(true);
				break;
			case main_region_Initializing_r1_SelectingFirstDomino:
				main_region_Initializing_r1_SelectingFirstDomino_react(true);
				break;
			case main_region_Running_r1_InitializeTurn:
				main_region_Running_r1_InitializeTurn_react(true);
				break;
			case main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer:
				main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer_react(true);
				break;
			case main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino:
				main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino_react(true);
				break;
			case main_region_Running_r1_PlayersTurn_r1_SelectingDomino:
				main_region_Running_r1_PlayersTurn_r1_SelectingDomino_react(true);
				break;
			case main_region_Running_r1_PlayersTurn_r1_Discarding:
				main_region_Running_r1_PlayersTurn_r1_Discarding_react(true);
				break;
			case main_region_EndGame:
				main_region_EndGame_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIDraft.clearEvents();
		sCITurn.clearEvents();
		sCIPlayer.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Initializing:
			return stateVector[0].ordinal() >= State.
					main_region_Initializing.ordinal()&& stateVector[0].ordinal() <= State.main_region_Initializing_r1_SelectingFirstDomino.ordinal();
		case main_region_Initializing_r1_CreatingFirstDraft:
			return stateVector[0] == State.main_region_Initializing_r1_CreatingFirstDraft;
		case main_region_Initializing_r1_SelectingFirstDomino:
			return stateVector[0] == State.main_region_Initializing_r1_SelectingFirstDomino;
		case main_region_Running:
			return stateVector[0].ordinal() >= State.
					main_region_Running.ordinal()&& stateVector[0].ordinal() <= State.main_region_Running_r1_PlayersTurn_r1_Discarding.ordinal();
		case main_region_Running_r1_InitializeTurn:
			return stateVector[0] == State.main_region_Running_r1_InitializeTurn;
		case main_region_Running_r1_PlayersTurn:
			return stateVector[0].ordinal() >= State.
					main_region_Running_r1_PlayersTurn.ordinal()&& stateVector[0].ordinal() <= State.main_region_Running_r1_PlayersTurn_r1_Discarding.ordinal();
		case main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer:
			return stateVector[0] == State.main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer;
		case main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino:
			return stateVector[0] == State.main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino;
		case main_region_Running_r1_PlayersTurn_r1_SelectingDomino:
			return stateVector[0] == State.main_region_Running_r1_PlayersTurn_r1_SelectingDomino;
		case main_region_Running_r1_PlayersTurn_r1_Discarding:
			return stateVector[0] == State.main_region_Running_r1_PlayersTurn_r1_Discarding;
		case main_region_EndGame:
			return stateVector[0] == State.main_region_EndGame;
		default:
			return false;
		}
	}
	
	public SCIGame getSCIGame() {
		return sCIGame;
	}
	
	public SCIDraft getSCIDraft() {
		return sCIDraft;
	}
	
	public SCITurn getSCITurn() {
		return sCITurn;
	}
	
	public SCIPlayer getSCIPlayer() {
		return sCIPlayer;
	}
	
	private boolean check_main_region_Running_r1_PlayersTurn_r1__choice_0_tr1_tr1() {
		return sCIPlayer.operationCallback.checkDiscard();
	}
	
	private void effect_main_region_Running_r1_PlayersTurn_r1__choice_0_tr1() {
		enterSequence_main_region_Running_r1_PlayersTurn_r1_Discarding_default();
	}
	
	private void effect_main_region_Running_r1_PlayersTurn_r1__choice_0_tr0() {
		enterSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer_default();
	}
	
	/* Entry action for state 'CreatingFirstDraft'. */
	private void entryAction_main_region_Initializing_r1_CreatingFirstDraft() {
		sCIDraft.operationCallback.prepareFirst();
	}
	
	/* Entry action for state 'EndGame'. */
	private void entryAction_main_region_EndGame() {
		sCIGame.operationCallback.end();
	}
	
	/* 'default' enter sequence for state Initializing */
	private void enterSequence_main_region_Initializing_default() {
		enterSequence_main_region_Initializing_r1_default();
	}
	
	/* 'default' enter sequence for state CreatingFirstDraft */
	private void enterSequence_main_region_Initializing_r1_CreatingFirstDraft_default() {
		entryAction_main_region_Initializing_r1_CreatingFirstDraft();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Initializing_r1_CreatingFirstDraft;
	}
	
	/* 'default' enter sequence for state SelectingFirstDomino */
	private void enterSequence_main_region_Initializing_r1_SelectingFirstDomino_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Initializing_r1_SelectingFirstDomino;
	}
	
	/* 'default' enter sequence for state Running */
	private void enterSequence_main_region_Running_default() {
		enterSequence_main_region_Running_r1_default();
	}
	
	/* 'default' enter sequence for state InitializeTurn */
	private void enterSequence_main_region_Running_r1_InitializeTurn_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_r1_InitializeTurn;
	}
	
	/* 'default' enter sequence for state PlayersTurn */
	private void enterSequence_main_region_Running_r1_PlayersTurn_default() {
		enterSequence_main_region_Running_r1_PlayersTurn_r1_default();
	}
	
	/* 'default' enter sequence for state InitialPlacementOfDominoForCurrentPlayer */
	private void enterSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer;
	}
	
	/* 'default' enter sequence for state MovingPreplacedDomino */
	private void enterSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino;
	}
	
	/* 'default' enter sequence for state SelectingDomino */
	private void enterSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_r1_PlayersTurn_r1_SelectingDomino;
	}
	
	/* 'default' enter sequence for state Discarding */
	private void enterSequence_main_region_Running_r1_PlayersTurn_r1_Discarding_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Running_r1_PlayersTurn_r1_Discarding;
	}
	
	/* 'default' enter sequence for state EndGame */
	private void enterSequence_main_region_EndGame_default() {
		entryAction_main_region_EndGame();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_EndGame;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Initializing_r1_default() {
		react_main_region_Initializing_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Running_r1_default() {
		react_main_region_Running_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Running_r1_PlayersTurn_r1_default() {
		react_main_region_Running_r1_PlayersTurn_r1__entry_Default();
	}
	
	/* Default exit sequence for state Initializing */
	private void exitSequence_main_region_Initializing() {
		exitSequence_main_region_Initializing_r1();
	}
	
	/* Default exit sequence for state CreatingFirstDraft */
	private void exitSequence_main_region_Initializing_r1_CreatingFirstDraft() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SelectingFirstDomino */
	private void exitSequence_main_region_Initializing_r1_SelectingFirstDomino() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Running */
	private void exitSequence_main_region_Running() {
		exitSequence_main_region_Running_r1();
	}
	
	/* Default exit sequence for state InitializeTurn */
	private void exitSequence_main_region_Running_r1_InitializeTurn() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PlayersTurn */
	private void exitSequence_main_region_Running_r1_PlayersTurn() {
		exitSequence_main_region_Running_r1_PlayersTurn_r1();
	}
	
	/* Default exit sequence for state InitialPlacementOfDominoForCurrentPlayer */
	private void exitSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state MovingPreplacedDomino */
	private void exitSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SelectingDomino */
	private void exitSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Discarding */
	private void exitSequence_main_region_Running_r1_PlayersTurn_r1_Discarding() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state EndGame */
	private void exitSequence_main_region_EndGame() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Initializing_r1_CreatingFirstDraft:
			exitSequence_main_region_Initializing_r1_CreatingFirstDraft();
			break;
		case main_region_Initializing_r1_SelectingFirstDomino:
			exitSequence_main_region_Initializing_r1_SelectingFirstDomino();
			break;
		case main_region_Running_r1_InitializeTurn:
			exitSequence_main_region_Running_r1_InitializeTurn();
			break;
		case main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer();
			break;
		case main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_SelectingDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_Discarding:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_Discarding();
			break;
		case main_region_EndGame:
			exitSequence_main_region_EndGame();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Initializing_r1() {
		switch (stateVector[0]) {
		case main_region_Initializing_r1_CreatingFirstDraft:
			exitSequence_main_region_Initializing_r1_CreatingFirstDraft();
			break;
		case main_region_Initializing_r1_SelectingFirstDomino:
			exitSequence_main_region_Initializing_r1_SelectingFirstDomino();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Running_r1() {
		switch (stateVector[0]) {
		case main_region_Running_r1_InitializeTurn:
			exitSequence_main_region_Running_r1_InitializeTurn();
			break;
		case main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer();
			break;
		case main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_SelectingDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_Discarding:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_Discarding();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Running_r1_PlayersTurn_r1() {
		switch (stateVector[0]) {
		case main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer();
			break;
		case main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_SelectingDomino:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino();
			break;
		case main_region_Running_r1_PlayersTurn_r1_Discarding:
			exitSequence_main_region_Running_r1_PlayersTurn_r1_Discarding();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Running_r1_PlayersTurn_r1__choice_0() {
		if (check_main_region_Running_r1_PlayersTurn_r1__choice_0_tr1_tr1()) {
			effect_main_region_Running_r1_PlayersTurn_r1__choice_0_tr1();
		} else {
			effect_main_region_Running_r1_PlayersTurn_r1__choice_0_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Initializing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Initializing_r1__entry_Default() {
		sCIGame.operationCallback.create();
		
		enterSequence_main_region_Initializing_r1_CreatingFirstDraft_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Running_r1__entry_Default() {
		enterSequence_main_region_Running_r1_InitializeTurn_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Running_r1_PlayersTurn_r1__entry_Default() {
		react_main_region_Running_r1_PlayersTurn_r1__choice_0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Initializing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIDraft.validSelection) && (sCIPlayer.operationCallback.isLast()))) {
				exitSequence_main_region_Initializing();
				sCIPlayer.operationCallback.setToFirst();
				
				enterSequence_main_region_Running_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Initializing_r1_CreatingFirstDraft_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIDraft.ready) {
				exitSequence_main_region_Initializing_r1_CreatingFirstDraft();
				sCIDraft.operationCallback.revealFirst();
				
				enterSequence_main_region_Initializing_r1_SelectingFirstDomino_default();
				main_region_Initializing_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Initializing_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Initializing_r1_SelectingFirstDomino_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIDraft.validSelection) && (!sCIPlayer.operationCallback.isLast()))) {
				exitSequence_main_region_Initializing_r1_SelectingFirstDomino();
				sCIPlayer.operationCallback.setNext();
				
				enterSequence_main_region_Initializing_r1_SelectingFirstDomino_default();
				main_region_Initializing_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Initializing_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_InitializeTurn_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIDraft.ready) {
				exitSequence_main_region_Running_r1_InitializeTurn();
				sCIDraft.operationCallback.revealNext();
				
				enterSequence_main_region_Running_r1_PlayersTurn_default();
				main_region_Running_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Running_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_PlayersTurn_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Running_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCITurn.preplaceDomino) {
				exitSequence_main_region_Running_r1_PlayersTurn_r1_InitialPlacementOfDominoForCurrentPlayer();
				enterSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino_default();
				main_region_Running_r1_PlayersTurn_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Running_r1_PlayersTurn_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCITurn.validPlacement) && (!sCITurn.operationCallback.isLast()))) {
				exitSequence_main_region_Running_r1_PlayersTurn_r1_MovingPreplacedDomino();
				enterSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino_default();
				main_region_Running_r1_PlayersTurn_react(false);
			} else {
				if (((sCITurn.validPlacement) && ((sCITurn.operationCallback.isLast() && !sCIPlayer.operationCallback.isLast())))) {
					exitSequence_main_region_Running_r1_PlayersTurn();
					sCIPlayer.operationCallback.setNext();
					
					enterSequence_main_region_Running_r1_PlayersTurn_default();
					main_region_Running_react(false);
				} else {
					if (((sCITurn.validPlacement) && ((sCITurn.operationCallback.isLast() && sCIPlayer.operationCallback.isLast())))) {
						exitSequence_main_region_Running();
						enterSequence_main_region_EndGame_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Running_r1_PlayersTurn_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_PlayersTurn_r1_SelectingDomino_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIDraft.validSelection) && (!sCIPlayer.operationCallback.isLast()))) {
				exitSequence_main_region_Running_r1_PlayersTurn();
				sCIPlayer.operationCallback.setNext();
				
				enterSequence_main_region_Running_r1_PlayersTurn_default();
				main_region_Running_react(false);
			} else {
				if (((sCIDraft.validSelection) && (sCIPlayer.operationCallback.isLast()))) {
					exitSequence_main_region_Running_r1_PlayersTurn();
					sCITurn.operationCallback.prepare();
					
					enterSequence_main_region_Running_r1_InitializeTurn_default();
					
					sCIDraft.operationCallback.prepareNext();
					
					main_region_Running_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Running_r1_PlayersTurn_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Running_r1_PlayersTurn_r1_Discarding_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIPlayer.discard) && (!sCITurn.operationCallback.isLast()))) {
				exitSequence_main_region_Running_r1_PlayersTurn_r1_Discarding();
				enterSequence_main_region_Running_r1_PlayersTurn_r1_SelectingDomino_default();
				main_region_Running_r1_PlayersTurn_react(false);
			} else {
				if (((sCIPlayer.discard) && ((sCITurn.operationCallback.isLast() && sCIPlayer.operationCallback.isLast())))) {
					exitSequence_main_region_Running();
					enterSequence_main_region_EndGame_default();
					react();
				} else {
					if (((sCIPlayer.discard) && ((sCITurn.operationCallback.isLast() && !sCIPlayer.operationCallback.isLast())))) {
						exitSequence_main_region_Running_r1_PlayersTurn();
						sCIPlayer.operationCallback.setNext();
						
						enterSequence_main_region_Running_r1_PlayersTurn_default();
						main_region_Running_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Running_r1_PlayersTurn_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_EndGame_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
